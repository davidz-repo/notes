{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"David\u2019s Notes Powered by MkDocs","title":"Home"},{"location":"#davids-notes-powered-by-mkdocs","text":"","title":"David's Notes Powered by MkDocs"},{"location":"c/","text":"","title":"C"},{"location":"cpp/","text":"notes from learning C++ coding conventions: no function body over 5 lines (brackets and variable dec do not count) upside-down fashion (1 pass), basic func -> combo -> main if write in the above fashion, then no comments needed (comments get outdated quickly) file I/O iostream and fstream ```C++ #include #include using namespace std; int main () { ofstream myfile; myfile.open (\"example.txt\"); myfile << \"Writing this to a file.\\n\"; myfile.close(); return 0; } `` - if call exit(), must include stdlib.h` input in C++ use cin to input variables. When type in numbers, be srue to seqparate them by a space so that cin can tell them apart and put them in the right variables. Structures in C++ Structures are a away to storing many different values in variables of potentially different types under the same name. struct hold variables together (such as Title, Artist, Year Published) format for defining a structure: C struct tags{ char[] title; char[] artist; int year; }; create a single structure: C struct tags structure_name; access the structure: C structure_name.variable_name; example: ```C #define STRMAX100 struct tags{ char title[STRMAX]; char artist[STRMAX]; int year_published; }; struct tags song1; song1.year = 1993; song1.title = \u201cToc Tok\u201d song1.artist = \u201cMacaco\u201d Strings in C++ 2 types of string declaration: C++ char string_name[size_int]; String string_name; must declare a size or specify what is in the array for char declaration. // Copies string s2 into string s1. strcpy(s1, s2); // Concatenates string s2 onto the end of string s1. strcat(s1, s2); // Returns the length of string s1. strlen(s1); // Returns 0 if s1 and s2 are the same; less than 0 if s1<s2; greater than 0 if s1>s2. strcmp(s1, s2); // Returns a pointer to the first occurrence of character ch in string s1. strchr(s1, ch); // Returns a pointer to the first occurrence of string s2 in string s1. strstr(s1, s2); include string.h to use strcmp() and strcpy() I/O for C: include printf - print format scaf/printf - get format of the number using % (etc. %d for integer) - point to the variable name using & (etc. &i for var i) for C++ ios input istream ifstream output ostream ofstream keyboard: cin monitors: cout local drives: reading input: writing output: cin cout data types l value and r value l the address of the variable r the value of the variable int type 11 //decimal 011 //octual 0-7 0x11 //hex be careful using equality on float and double types use less than epsilon as parameter always add const to char * <var> = <...>","title":"C++"},{"location":"cpp/#notes-from-learning-c","text":"","title":"notes from learning C++"},{"location":"cpp/#coding-conventions","text":"no function body over 5 lines (brackets and variable dec do not count) upside-down fashion (1 pass), basic func -> combo -> main if write in the above fashion, then no comments needed (comments get outdated quickly)","title":"coding conventions:"},{"location":"cpp/#file-io","text":"iostream and fstream ```C++ #include #include using namespace std; int main () { ofstream myfile; myfile.open (\"example.txt\"); myfile << \"Writing this to a file.\\n\"; myfile.close(); return 0; } `` - if call exit(), must include stdlib.h`","title":"file I/O"},{"location":"cpp/#input-in-c","text":"use cin to input variables. When type in numbers, be srue to seqparate them by a space so that cin can tell them apart and put them in the right variables.","title":"input in C++"},{"location":"cpp/#structures-in-c","text":"Structures are a away to storing many different values in variables of potentially different types under the same name. struct hold variables together (such as Title, Artist, Year Published) format for defining a structure: C struct tags{ char[] title; char[] artist; int year; }; create a single structure: C struct tags structure_name; access the structure: C structure_name.variable_name; example: ```C #define STRMAX100 struct tags{ char title[STRMAX]; char artist[STRMAX]; int year_published; }; struct tags song1; song1.year = 1993; song1.title = \u201cToc Tok\u201d song1.artist = \u201cMacaco\u201d","title":"Structures in C++"},{"location":"cpp/#strings-in-c","text":"2 types of string declaration: C++ char string_name[size_int]; String string_name; must declare a size or specify what is in the array for char declaration. // Copies string s2 into string s1. strcpy(s1, s2); // Concatenates string s2 onto the end of string s1. strcat(s1, s2); // Returns the length of string s1. strlen(s1); // Returns 0 if s1 and s2 are the same; less than 0 if s1<s2; greater than 0 if s1>s2. strcmp(s1, s2); // Returns a pointer to the first occurrence of character ch in string s1. strchr(s1, ch); // Returns a pointer to the first occurrence of string s2 in string s1. strstr(s1, s2); include string.h to use strcmp() and strcpy()","title":"Strings in C++"},{"location":"cpp/#io","text":"for C:","title":"I/O"},{"location":"cpp/#include","text":"printf - print format scaf/printf - get format of the number using % (etc. %d for integer) - point to the variable name using & (etc. &i for var i) for C++ ios input istream ifstream output ostream ofstream keyboard: cin monitors: cout local drives: reading input: writing output: cin cout","title":"include "},{"location":"cpp/#data-types","text":"l value and r value l the address of the variable r the value of the variable int type 11 //decimal 011 //octual 0-7 0x11 //hex be careful using equality on float and double types use less than epsilon as parameter always add const to char * <var> = <...>","title":"data types"},{"location":"git/","text":"Git commands If you wish to set tracking information for this branch you can do so with: git branch --set-upstream-to=origin/<branch_name> <branch_name> commit new feature changes clone the repo checkout the repository branch ./git-setup.sh create a local branch using git checkout -b feature/<local_branch_name> make changes on the local branch git add git commit -m \u201c git push origin <local_branch_name> Go to gitlab GUI and create a merge request from the local branch to the target branch Once approved, local branch will be merged address merge request changes clone the repo (master) git fetch origin checkout a local branch from remote branch git checkout -b local_branch_name origin/local_branch_name make additional changes to address comments git init; git add . git commit with a new message git push origin <remote branch name>","title":"Git"},{"location":"git/#git-commands","text":"If you wish to set tracking information for this branch you can do so with: git branch --set-upstream-to=origin/<branch_name> <branch_name>","title":"Git commands"},{"location":"git/#commit-new-feature-changes","text":"clone the repo checkout the repository branch ./git-setup.sh create a local branch using git checkout -b feature/<local_branch_name> make changes on the local branch git add git commit -m \u201c git push origin <local_branch_name> Go to gitlab GUI and create a merge request from the local branch to the target branch Once approved, local branch will be merged","title":"commit new feature changes"},{"location":"git/#address-merge-request-changes","text":"clone the repo (master) git fetch origin checkout a local branch from remote branch git checkout -b local_branch_name origin/local_branch_name make additional changes to address comments git init; git add . git commit with a new message git push origin <remote branch name>","title":"address merge request changes"},{"location":"java/","text":"Notes from learning java remove spaces from a string stringVar.replaceAll(\" \", \"\"); length of a string or an array stringVar.length(); arr.length(); convert a char to a string Character.toString(char var); return a char from indexed string stringVar.charAt(int index); convert a int into a string String stringVar = Integer.toString(int num); raise a number to the $i^{th}$ power Math.pow(int num, double i); convert a number into an integer (int)num; convert a number to a double type num.doubleValue();","title":"Java"},{"location":"java/#notes-from-learning-java","text":"remove spaces from a string stringVar.replaceAll(\" \", \"\"); length of a string or an array stringVar.length(); arr.length(); convert a char to a string Character.toString(char var); return a char from indexed string stringVar.charAt(int index); convert a int into a string String stringVar = Integer.toString(int num); raise a number to the $i^{th}$ power Math.pow(int num, double i); convert a number into an integer (int)num; convert a number to a double type num.doubleValue();","title":"Notes from learning java"},{"location":"lessons_learned/","text":"Lessons learned write fake apis to test especially when you are modifying/adding features stay calm and think about the problem from beginning when cannot find the reason why it\u2019s not working, narrow down the scope ask the right questions never lose sight of big picture, and always start executing with a focus on details","title":"Lessons Learned"},{"location":"lessons_learned/#lessons-learned","text":"write fake apis to test especially when you are modifying/adding features stay calm and think about the problem from beginning when cannot find the reason why it\u2019s not working, narrow down the scope ask the right questions never lose sight of big picture, and always start executing with a focus on details","title":"Lessons learned"},{"location":"linux/","text":"Download from sftp server sftp user@host cd /path/to lcd /some/local/path get filename Linux commands sed syslog dmesg -n1 Basic Command Line Editing Esc + T : Swap the last two words before the cursor Ctrl + H : Delete the letter starting at the cursor Ctrl + W : Delete the word starting at the cursor TAB : Auto-complete files, directory, command names and much more Ctrl + R : To see the command history. Ctrl + U : Clear the line Ctrl + C : Cancel currently running commands. Ctrl + L : Clear the screen Ctrl + T : Swap the last two characters before the cursor Characters Description / Directory separator, used to separate a string of directory names. Example: /home/projects/file \\ Escape character. If you want to reference a special character, you must \u201cescape\u201d it with a backslash first. Example: \\n means newline; \\v means vertical tab; \\r means return # Lines starting with # will not be executed. These lines are comments . Current directory. When its the first character in a filename, it can also \u201chide\u201d files .. Returns the parent directory ~ Returns user\u2019s home directory ~+ Returns the current working directory. It corresponds to the $PWD internal variable ~- Returns the previous working directory. It corresponds to the $OLDPWD internal variable * Represents 0 or more characters in a filename, or by itself, it matches all files in a directory. Example: file*2019 can return: file2019, file_comp2019, fileMay2019 [] Can be used to represent a range of values, e.g. [0-9], [A-Z], etc. Example: file[3-5].txt represents file3.txt, file4.txt, file5.txt | Known as \u201cpipe\u201d. It redirects the output of the previous command into the input of the next command. Example: ls | less < It redirects a file as an input to a program. Example: more < file.txt > In script name >filename it will redirect the output of \u201cscript name\u201d to \u201cfile filename\u201d. Overwrite filename if it already exists. Example: ls > file.txt >> Redirect and append the output of the command to the end of the file. Example: echo \u201cTo the end of file\u201d << file.txt & Execute a job in the background and immediately get your shell back. Example: sleep 10 & && \u201cAND logical operator\u201d. It returns (success) only if both the linked test conditions are true. It would run the second command only if the first one ran without errors. Example: let \u201cnum = (( 0 && 1 ))\u201d; cd/comp/projs && less messages ; \u201cCommand separator\u201d. Allows you to execute multiple commands in a single line. Example: cd/comp/projs ; less messages ? This character serves as a single character in a filename. Example: file?.txt can represent file1.txt, file2.txt, file3.txt inodes Mode -permission and file descriptor (direcotry, link, block\u2026) owner information size time stamp - creation & modification data blocks - pointer to the actual data soft links similar to MS windows shortcuts one file can have many shortcuts pointing to it ln -s targetFILE srcFILE once move the shortcut to another dir, it loses link hard links just different names for the same file one file can have many different names or hard links can be moved to any directory and still maintain the link to the inode","title":"Linux"},{"location":"linux/#download-from-sftp-server","text":"sftp user@host cd /path/to lcd /some/local/path get filename","title":"Download from sftp server"},{"location":"linux/#linux-commands","text":"sed syslog dmesg -n1","title":"Linux commands"},{"location":"linux/#basic-command-line-editing","text":"Esc + T : Swap the last two words before the cursor Ctrl + H : Delete the letter starting at the cursor Ctrl + W : Delete the word starting at the cursor TAB : Auto-complete files, directory, command names and much more Ctrl + R : To see the command history. Ctrl + U : Clear the line Ctrl + C : Cancel currently running commands. Ctrl + L : Clear the screen Ctrl + T : Swap the last two characters before the cursor","title":"Basic Command Line Editing"},{"location":"linux/#characters-description","text":"/ Directory separator, used to separate a string of directory names. Example: /home/projects/file \\ Escape character. If you want to reference a special character, you must \u201cescape\u201d it with a backslash first. Example: \\n means newline; \\v means vertical tab; \\r means return # Lines starting with # will not be executed. These lines are comments . Current directory. When its the first character in a filename, it can also \u201chide\u201d files .. Returns the parent directory ~ Returns user\u2019s home directory ~+ Returns the current working directory. It corresponds to the $PWD internal variable ~- Returns the previous working directory. It corresponds to the $OLDPWD internal variable * Represents 0 or more characters in a filename, or by itself, it matches all files in a directory. Example: file*2019 can return: file2019, file_comp2019, fileMay2019 [] Can be used to represent a range of values, e.g. [0-9], [A-Z], etc. Example: file[3-5].txt represents file3.txt, file4.txt, file5.txt | Known as \u201cpipe\u201d. It redirects the output of the previous command into the input of the next command. Example: ls | less < It redirects a file as an input to a program. Example: more < file.txt > In script name >filename it will redirect the output of \u201cscript name\u201d to \u201cfile filename\u201d. Overwrite filename if it already exists. Example: ls > file.txt >> Redirect and append the output of the command to the end of the file. Example: echo \u201cTo the end of file\u201d << file.txt & Execute a job in the background and immediately get your shell back. Example: sleep 10 & && \u201cAND logical operator\u201d. It returns (success) only if both the linked test conditions are true. It would run the second command only if the first one ran without errors. Example: let \u201cnum = (( 0 && 1 ))\u201d; cd/comp/projs && less messages ; \u201cCommand separator\u201d. Allows you to execute multiple commands in a single line. Example: cd/comp/projs ; less messages ? This character serves as a single character in a filename. Example: file?.txt can represent file1.txt, file2.txt, file3.txt","title":"Characters   Description"},{"location":"linux/#inodes","text":"Mode -permission and file descriptor (direcotry, link, block\u2026) owner information size time stamp - creation & modification data blocks - pointer to the actual data","title":"inodes"},{"location":"linux/#soft-links","text":"similar to MS windows shortcuts one file can have many shortcuts pointing to it ln -s targetFILE srcFILE once move the shortcut to another dir, it loses link","title":"soft links"},{"location":"linux/#hard-links","text":"just different names for the same file one file can have many different names or hard links can be moved to any directory and still maintain the link to the inode","title":"hard links"},{"location":"python/","text":"notes from learning Python check if a variable is an integer isinstance(num, int) convert a number into an integer int(num) sorted( iterable , key , reverse =False) - iterable: list, tuple, string, dictionary, set, frozenset \u2026 - key: a function serve as a key or a basis of sorting (e.g. len) comparison sorted([\"cccc\", \"b\", \"dd\", \"aaa\"] , key = len) # ['b', 'dd', 'aaa', 'cccc'] convert an integer to a string str(num) convert a string into a list of characters list(stringVar) join a list of characters into a string \"\".join(listVar) substitute all matched pattern into something else import re pattern = re.compile(matched) newString = pattern.sub(replacement, oldString, count=0) # the count is to indicate the first # of cases to replace, 0 is to replace all count the occurrence of a substring from a string variable stringVar.count(subVar[, start[, end]]) # start and end indices are optional num1 // num2 only in Python3x. flooring division(quotient without remainder) 10//6 # 1 7.//3 # 2.0 7//3. # 2.0 zip 2 lists into a dictionary # 2 lists must be the same length dict(zip(list1, list2)) sum up an array of numbers using reduce() reduce(lambda x, y: x + y, arr) capitalize the first letter of a stringVar # method 1 stringVar.capitalize() # method 2 stringVar = stringVar[0].upper() + stringVar[1:] a string of lowercase alphabet import string string.ascii_lowercase initialize a dictionary of alphabets with value 0 import string dict.fromkeys(string.ascii_lowercase, 0) get the unicode of a length-one string or a character ord(charVar) ord(stringVar) # len(stringVar) is 1","title":"Python"},{"location":"python/#notes-from-learning-python","text":"check if a variable is an integer isinstance(num, int) convert a number into an integer int(num) sorted( iterable , key , reverse =False) - iterable: list, tuple, string, dictionary, set, frozenset \u2026 - key: a function serve as a key or a basis of sorting (e.g. len) comparison sorted([\"cccc\", \"b\", \"dd\", \"aaa\"] , key = len) # ['b', 'dd', 'aaa', 'cccc'] convert an integer to a string str(num) convert a string into a list of characters list(stringVar) join a list of characters into a string \"\".join(listVar) substitute all matched pattern into something else import re pattern = re.compile(matched) newString = pattern.sub(replacement, oldString, count=0) # the count is to indicate the first # of cases to replace, 0 is to replace all count the occurrence of a substring from a string variable stringVar.count(subVar[, start[, end]]) # start and end indices are optional num1 // num2 only in Python3x. flooring division(quotient without remainder) 10//6 # 1 7.//3 # 2.0 7//3. # 2.0 zip 2 lists into a dictionary # 2 lists must be the same length dict(zip(list1, list2)) sum up an array of numbers using reduce() reduce(lambda x, y: x + y, arr) capitalize the first letter of a stringVar # method 1 stringVar.capitalize() # method 2 stringVar = stringVar[0].upper() + stringVar[1:] a string of lowercase alphabet import string string.ascii_lowercase initialize a dictionary of alphabets with value 0 import string dict.fromkeys(string.ascii_lowercase, 0) get the unicode of a length-one string or a character ord(charVar) ord(stringVar) # len(stringVar) is 1","title":"notes from learning Python"}]}